pull 원격에서 내려받기를 하면 충돌과 관련이 깊다.

pull 같은 경우는 변경사항만 내려받는 것 이다.

원격장소는 아무 브랜치명을 해도 상관이 없다.

소스트리 라는 툴 다운로드 -> 실무에서 거의 절반 이상이 사용하는 것 같다.

우리는 왜 제 3자 인증을 아주 간편하게 했는가?

리눅스에서 왜 테스트 해야하는가? 환경이 바뀌어서 내가
다른 환경에서 내 깃허브를 로그인해야할떄

git clone은 잘 된다. push가 안될뿐
private으로 바꾸면 권한이 있는 사람만 가능하게끔한다.
우리가 이 깃헙에 소유주면 oauth 인증 받으니까 괜찮지만
내가 소유주가 아니기 때문에 혹시 토큰값 잇냐고 달라라고 해야한다.
아니면 회사 계정으로 로그인해서 oauth 인증을 받던지 둘 중 하나를 해야한다.
리더가 token을 발급해줄 것 이다.

윈도우->제어판->token 입력해야함
권한을 인증처리 해야한다.

github에 레포를 만들지 않은 채, 로컬에 작업이 시작 됐다.
로컬 프로젝트를 어떻게 github에 올릴 것인가.
로컬에서 1.git init -> .git 폴더 생성 -> git add . -> git commit -m
        2.git remote add orgin 레포주소->git push orgin 레포
        3.타인의 레포를 git clone -> .git 폴더 지우기 -> git init


실습 2 가지

실습 1
강사님 레포 kimseonguk197 깃 주소에서 아무거나 여러분 레포로 갖고가기
 1) commit ID를 다 유지한채 가져가기 (팀 작업 후 가져가기)
    git remote set-url origin 내 레포주소 -> push만 하면 끝난다 커밋이력이 다 있기 떄문에
 2) commit ID를 전부 없애고 내 레포 인것처럼 가져가기
  .git폴더 -> git init -> git remote add origin 내레포 => 커밋이력을 다 지워버렸기 때문에
  git add -> git commit -> git push 


fork : 오픈소스프로젝트가 있는데



타인레포 clone 방법 2가지
#커밋이력 그대로 가져오기
git clone 타인레포주소 -> 해당 폴더로 이동 후 git 명령어를 쓰는데
git remote set-url origin 내레포주소
git push origin master 또는 main 별도의 add, commit 필요없고 바로 push 가능


#커밋이력 없이 가져오기
git clone 타인레포주소 -> 해당 폴더로 이동!!하고 .git 폴더 삭제하기.
git init
git add .
git commit -m "my first commit"
git push origin master 또는 main

# 확장자 .gitignore 파일 생성 후 git 추적 제외 대상 나열
내가 깃으로 이 파일을 추적하지 않겟다.

.gitignore 파일에 포함된 파일들은 추적하지 않겟다.




1) fast-forward


2) 워킹디렉터리에서만 작업하고 깃풀
fetch는 성공, 머지 -> 어디어디 틀렷는지 비교 불가
=>해결책? -> add 커밋 -> git merge origin/master

3) 커밋까지하고 깃풀
fetch 성공 -> 머지 실패 어디어디 틀렷는지 비교해서 알려줌
=>충돌사항 정리하고 -> add 커밋 푸시


case1

case2

case3

case4

case5